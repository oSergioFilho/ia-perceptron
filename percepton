# Criação dos dados: Supondo que os primeiros 20 pontos representem "laranjas" e os últimos 20 representem "bananas".
# Divisão dos dados: O conjunto de dados é dividido em treino (70%) e teste (30%) para avaliar a precisão da rede.
#Arquitetura da rede:
#Camada de entrada com 2 neurônios (para comprimento e altura).
#Camada oculta com 10 neurônios e função de ativação ReLU.
#Camada de saída com 2 neurônios, representando as classes "laranja" e "banana", usando a função softmax para gerar probabilidades.
#Treinamento e Avaliação: A rede é treinada por 100 épocas com uma taxa de aprendizado de 0.01 e avaliada no conjunto de teste.""

import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.utils import to_categorical

# Dados das frutas: comprimento e altura
frutas = np.array([
    [8.5, 8.4], [9, 9.1], [7.8, 7.9], [8.2, 8.3], [8.9, 8.8],
    [9.2, 9.1], [8.4, 8.3], [9, 9], [8.7, 8.6], [9.1, 9.2], 
    [8.6, 8.5], [8.9, 8.7], [9.2, 9.2], [8.8, 8.7], [8.4, 8.5], 
    [9.1, 9], [8.7, 8.8], [9, 9], [8.6, 8.7], [9.2, 9.1],  # Laranjas (supondo)

    [10.5, 4.5], [10, 5], [8.3, 4.8], [8.2, 4.7], [8.8, 4.3],
    [10.1, 5.1], [8.7, 4.9], [10.9, 5], [8.2, 4.4], [10.2, 5.2],
    [8.5, 4.5], [8, 4.6], [8.5, 4.2], [10.3, 5.1], [8.6, 4.7],
    [10.4, 5.3], [8.7, 4.6], [8.5, 4.8], [8.9, 4.4], [10, 5]  # Bananas (supondo)
])

# Rótulos para as frutas (0 = Laranja, 1 = Banana)
labels = np.array([0]*20 + [1]*20)  # 0 para laranja, 1 para banana

# Dividir o dataset em treino e teste
X_train, X_test, y_train, y_test = train_test_split(frutas, labels, test_size=0.3, random_state=42)

# Pré-processar os rótulos para serem usados na rede neural
y_train = to_categorical(y_train)
y_test = to_categorical(y_test)

# Criar o modelo perceptron
model = Sequential()
model.add(Dense(10, input_dim=2, activation='relu'))  # Camada oculta com 10 neurônios
model.add(Dense(2, activation='softmax'))  # Camada de saída com 2 neurônios (laranja ou banana)

# Compilar o modelo
model.compile(optimizer=Adam(learning_rate=0.01), loss='categorical_crossentropy', metrics=['accuracy'])

# Treinar o modelo
history = model.fit(X_train, y_train, epochs=100, batch_size=4, validation_data=(X_test, y_test), verbose=1)

# Avaliar o modelo no conjunto de teste
loss, accuracy = model.evaluate(X_test, y_test)
print(f"Acurácia no conjunto de teste: {accuracy * 100:.2f}%")
